// Copyright (c) 2020 Gonzalo MÃ¼ller Bravo.

import type {
  Element,
  Node
} from 'react'

// Provider Component
/////////////////////

type Id = string | number | Symbol

interface ProviderProps<STATE> {
  id?: Id;
  initialState: STATE;
  children: Node;
}

// Reducer Component Definition
///////////////////////////////

interface ReducerProps<STATE, REDUCER> extends ProviderProps<STATE> {
  reducer: REDUCER;
}

export interface SyncReducer<STATE, ACTION> {
  (prevState: STATE, action: ACTION, ...args: $ReadOnlyArray<any>): STATE;
}

export interface SyncReducerProps<STATE, ACTION> extends ReducerProps<STATE, SyncReducer<STATE, ACTION>> {}

declare export function SyncReducerProvider<STATE, ACTION>(
  props: $ReadOnly<SyncReducerProps<STATE, ACTION>>
): Element<typeof SyncReducerProvider>

export interface AsyncReducer<STATE, ACTION> {
  (prevState: STATE, action: ACTION, ...args: $ReadOnlyArray<any>): Promise<STATE>;
}

export interface AsyncReducerProps<STATE, ACTION> extends ReducerProps<STATE, AsyncReducer<STATE, ACTION>> {}

declare export function AsyncReducerProvider<STATE, ACTION>(
  props: $ReadOnly<AsyncReducerProps<STATE, ACTION>>
): Element<typeof AsyncReducerProvider>

// Mapper Component Definition
//////////////////////////////

interface MapperProps<STATE, MAPPER> extends ProviderProps<STATE> {
  mapper: MAPPER;
}

export interface SyncMapper<STATE, ACTION> {
  (action: ACTION, ...args: $ReadOnlyArray<any>): STATE;
}

export interface SyncMapperProps<STATE, ACTION> extends MapperProps<STATE, SyncMapper<STATE, ACTION>> {}

declare export function SyncMapperProvider<STATE, ACTION>(
  props: $ReadOnly<SyncMapperProps<STATE, ACTION>>
): Element<typeof SyncMapperProvider>

export interface AsyncMapper<STATE, ACTION> {
  (action: ACTION, ...args: $ReadOnlyArray<any>): Promise<STATE>;
}

export interface AsyncMapperProps<STATE, ACTION> extends MapperProps<STATE, AsyncMapper<STATE, ACTION>> {}

declare export function AsyncMapperProvider<STATE, ACTION>(
  props: $ReadOnly<AsyncMapperProps<STATE, ACTION>>
): Element<typeof AsyncMapperProvider>

// Providers Consumption
////////////////////////

export type Sync<T = any> = T
export type Async<T = any> = Promise<T>

export interface Dispatcher<ACTION, DISPATCH: Async<> | Sync<> = Sync<void>> {
  (value: ACTION, ...args: $ReadOnlyArray<any>): DISPATCH
}

export type ProviderValue<
  STATE,
  ACTION,
  DISPATCH: Async<void | STATE> | Sync<void | STATE> = Sync<void>
> = [STATE, Dispatcher<ACTION, DISPATCH>]

declare export function useReducer<STATE, ACTION, DISPATCH: Async<void | STATE> | Sync<void | STATE> = Sync<void>>(
  id?: Id
): ProviderValue<STATE, ACTION, DISPATCH>

declare export function useReducerState<STATE>(id?: Id): STATE

declare export function useReducerDispatcher<ACTION, DISPATCH: Async<> | Sync<> = Sync<void>>(
  id?: Id
): Dispatcher<ACTION, DISPATCH>

declare export function useMapper<STATE, ACTION, DISPATCH: Async<void | STATE> | Sync<void | STATE> = Sync<void>>(
  id?: Id
): ProviderValue<STATE, ACTION, DISPATCH>

declare export function useMapperState<STATE>(id?: Id): STATE

declare export function useMapperDispatcher<ACTION, DISPATCH: Async<> | Sync<> = Sync<void>>(
  id?: Id
): Dispatcher<ACTION, DISPATCH>

// Tagged Provider Component
////////////////////////////

export interface TaggedProviderProps {
  id?: Id;
  children: Node;
}

// Tagged Reducer Component Definition
//////////////////////////////////////

export interface TaggedReducerProps<REDUCER> extends TaggedProviderProps {
  reducers: REDUCER[];
}

export type SyncTaggedReducer = [ Id, SyncReducer<any, any>, any ]

export interface SyncTaggedReducerProps extends TaggedReducerProps<SyncTaggedReducer> {}

declare export function SyncTaggedReducerProvider(
  props: $ReadOnly<SyncTaggedReducerProps>
): Element<typeof SyncTaggedReducerProvider>

export type AsyncTaggedReducer = [ Id, AsyncReducer<any, any>, any ]

export interface AsyncTaggedReducerProps extends TaggedReducerProps<AsyncTaggedReducer> {}

declare export function AsyncTaggedReducerProvider(
  props: $ReadOnly<AsyncTaggedReducerProps>
): Element<typeof AsyncTaggedReducerProvider>

// Tagged Consumption
/////////////////////

export interface TaggedStates<ANY_ID: Id, ANY_STATE> extends Map<ANY_ID, ANY_STATE> {}

export interface TaggedDispatchers<
    ANY_ID: Id,
    ANY_DISPATCHER: Dispatcher<any, any> = Dispatcher<any, any>
> extends Map<ANY_ID, ANY_DISPATCHER> {}

export type TaggedProviderValue<
  ANY_ID: Id,
  ANY_STATE,
  ANY_DISPATCHER: Dispatcher<any, any> = Dispatcher<any, any>
> = [ TaggedStates<ANY_ID, ANY_STATE>, TaggedDispatchers<ANY_ID, ANY_DISPATCHER>]

declare export function useTaggedAny<ANY_ID: Id, ANY_STATE, ANY_DISPATCHER: Dispatcher<any, any> = Dispatcher<any, any>>(
  id?: Id
): TaggedProviderValue<ANY_ID, ANY_STATE, ANY_DISPATCHER>

declare export function useTaggedAnyState<ANY_ID: Id, ANY_STATE>(id?: Id): TaggedStates<ANY_ID, ANY_STATE>

declare export function useTaggedAnyDispatcher<
    ANY_ID: Id,
    ANY_DISPATCHER: Dispatcher<any, any> = Dispatcher<any, any>
>(id?: Id): TaggedDispatchers<ANY_ID, ANY_DISPATCHER>

declare export function useTaggedReducer<STATE, ACTION, DISPATCH: Async<void | STATE> | Sync<void | STATE> = Sync<void>>(
  tag: Id, id?: Id
): ProviderValue<STATE, ACTION, DISPATCH>

declare export function useTaggedReducerState<STATE>(tag: Id, id?: Id): STATE

declare export function useTaggedReducerDispatcher<ACTION, DISPATCH: Async<> | Sync<> = Sync<void>>(
  tag: Id, id?: Id
): Dispatcher<ACTION, DISPATCH>

// Helpers
//////////

export interface AnyAsyncDispatcher<ACTION = any, DISPATCH: Async<> = Async<void>> {
  (value: ACTION, ...args: $ReadOnlyArray<any>): DISPATCH
}

export interface Action<TYPE, DATA = typeof undefined> {
  type: TYPE;
  data?: DATA;
}
